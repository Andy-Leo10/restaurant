package com.example.restaurant
import com.example.restaurant.SettingsScreen
import com.example.restaurant.AskOrderScreen
import com.example.restaurant.DeliverOrderScreen

import android.os.Bundle
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.viewinterop.AndroidView
import androidx.compose.ui.Alignment
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.restaurant.ui.theme.RestaurantTheme

import com.ainirobot.coreservice.IRobotSettingApi
import android.os.RemoteException
import com.ainirobot.coreservice.client.module.ModuleCallbackApi
import com.ainirobot.coreservice.client.RobotApi
import com.ainirobot.coreservice.client.ApiListener
import com.ainirobot.coreservice.client.StatusListener
import com.ainirobot.coreservice.client.Definition

private var statusListener: StatusListener? = null

class ModuleCallback : ModuleCallbackApi() {
    override fun onSendRequest(reqId: Int, reqType: String, reqText: String, reqParam: String): Boolean {
        // Handle voice command
        // reqType: voice command type
        // reqText: voice-to-text
        // reqParam: voice command parameter
        return true
    }

    override fun onRecovery() {
        // Regain control of the robot
    }

    override fun onSuspend() {
        // Control is deprived by the system. All API calls are invalid
    }
}

private fun registerStatusListener() {
    statusListener = object : StatusListener() {
        override fun onStatusUpdate(type: String, data: String) {
            // Handle status updates
            when (type) {
                Definition.STATUS_BATTERY -> {
                    // Example: Log battery status
                    println("Battery status: $data")
                }
                Definition.STATUS_POSE -> {
                    // Example: Log robot pose
                    println("Robot pose: $data")
                }
                Definition.STATUS_POSE_ESTIMATE -> {
                    // Example: Log positioning status
                    println("Positioning status: $data")
                }
            }
        }
    }
    // Register the listener with the RobotApi
    RobotApi.getInstance().registerStatusListener(Definition.STATUS_BATTERY, statusListener)
}

private fun unregisterStatusListener() {
    statusListener?.let {
        RobotApi.getInstance().unregisterStatusListener(it)
    }
}

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        // Register status listener
        registerStatusListener()

        // Connect to the server
        RobotApi.getInstance().connectServer(this, object : ApiListener {
            override fun handleApiDisabled() {
                // Handle API disabled
            }

            override fun handleApiConnected() {
                // Set the callback for receiving requests
                RobotApi.getInstance().setCallback(ModuleCallback())
            }

            override fun handleApiDisconnected() {
                // Handle API disconnected
            }
        })

        setContent {
            RestaurantTheme {
                AppNavigation()
            }
        }
    }
    override fun onDestroy() {
        super.onDestroy()
        // Unregister status listener
        unregisterStatusListener()
    }    
}

@Composable
fun AppNavigation() {
    var currentScreen by remember { mutableStateOf("MainScreen") }

    when (currentScreen) {
        "MainScreen" -> MainScreen(
            onNavigateToSettings = { currentScreen = "SettingsScreen" },
            onNavigateToAskOrder = { currentScreen = "AskOrderScreen" },
            onNavigateToDeliverOrder = { currentScreen = "DeliverOrderScreen" }
        )
        "SettingsScreen" -> SettingsScreen(onBackClick = { currentScreen = "MainScreen" })
        "AskOrderScreen" -> AskOrderScreen(onBackClick = { currentScreen = "MainScreen" })
        "DeliverOrderScreen" -> DeliverOrderScreen(onBackClick = { currentScreen = "MainScreen" })
    }
}

@Composable
fun MainScreen(
    onNavigateToSettings: () -> Unit = {},
    onNavigateToAskOrder: () -> Unit = {},
    onNavigateToDeliverOrder: () -> Unit = {}
) {
    Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .padding(16.dp),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Button(onClick = onNavigateToSettings) {
                Text("Settings")
            }
            Spacer(modifier = Modifier.height(16.dp))
            Button(onClick = onNavigateToAskOrder) {
                Text("Ask Order")
            }
            Spacer(modifier = Modifier.height(16.dp))
            Button(onClick = onNavigateToDeliverOrder) {
                Text("Deliver Order")
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    RestaurantTheme {
        MainScreen()
    }
}
